// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ezLogPB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EzLogGrpcClient is the client API for EzLogGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EzLogGrpcClient interface {
	Log(ctx context.Context, opts ...grpc.CallOption) (EzLogGrpc_LogClient, error)
}

type ezLogGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewEzLogGrpcClient(cc grpc.ClientConnInterface) EzLogGrpcClient {
	return &ezLogGrpcClient{cc}
}

func (c *ezLogGrpcClient) Log(ctx context.Context, opts ...grpc.CallOption) (EzLogGrpc_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &EzLogGrpc_ServiceDesc.Streams[0], "/EzLogGrpc/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &ezLogGrpcLogClient{stream}
	return x, nil
}

type EzLogGrpc_LogClient interface {
	Send(*LogReq) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type ezLogGrpcLogClient struct {
	grpc.ClientStream
}

func (x *ezLogGrpcLogClient) Send(m *LogReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ezLogGrpcLogClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EzLogGrpcServer is the server API for EzLogGrpc service.
// All implementations must embed UnimplementedEzLogGrpcServer
// for forward compatibility
type EzLogGrpcServer interface {
	Log(EzLogGrpc_LogServer) error
	mustEmbedUnimplementedEzLogGrpcServer()
}

// UnimplementedEzLogGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedEzLogGrpcServer struct {
}

func (UnimplementedEzLogGrpcServer) Log(EzLogGrpc_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedEzLogGrpcServer) mustEmbedUnimplementedEzLogGrpcServer() {}

// UnsafeEzLogGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EzLogGrpcServer will
// result in compilation errors.
type UnsafeEzLogGrpcServer interface {
	mustEmbedUnimplementedEzLogGrpcServer()
}

func RegisterEzLogGrpcServer(s grpc.ServiceRegistrar, srv EzLogGrpcServer) {
	s.RegisterService(&EzLogGrpc_ServiceDesc, srv)
}

func _EzLogGrpc_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EzLogGrpcServer).Log(&ezLogGrpcLogServer{stream})
}

type EzLogGrpc_LogServer interface {
	SendAndClose(*Empty) error
	Recv() (*LogReq, error)
	grpc.ServerStream
}

type ezLogGrpcLogServer struct {
	grpc.ServerStream
}

func (x *ezLogGrpcLogServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ezLogGrpcLogServer) Recv() (*LogReq, error) {
	m := new(LogReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EzLogGrpc_ServiceDesc is the grpc.ServiceDesc for EzLogGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EzLogGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EzLogGrpc",
	HandlerType: (*EzLogGrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _EzLogGrpc_Log_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ezlogPB.proto",
}
